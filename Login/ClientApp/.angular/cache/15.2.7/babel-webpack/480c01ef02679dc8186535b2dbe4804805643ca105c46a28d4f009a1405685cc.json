{"ast":null,"code":"import { ROLE_CLAIM_KEY } from '../constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./TokenServices\";\nimport * as i2 from \"./userServices\";\nimport * as i3 from \"@auth0/angular-jwt\";\nexport class AuthService {\n  constructor(tokenService, userServices, jwtHelper) {\n    this.tokenService = tokenService;\n    this.userServices = userServices;\n    this.jwtHelper = jwtHelper;\n  }\n  isLoggedIn() {\n    const token = this.tokenService.getToken();\n    if (token) {\n      return this.validateToken(token);\n    }\n    return false;\n  }\n  validateToken(token) {\n    // Convertir la cadena de fecha a un objeto Date\n    const expiryDateToken = new Date(token.tokenAcces.timeExpiry);\n    const expiryDateTokenRefres = new Date(token.tokenRefresh.timeExpiry);\n    //agregar las horas de la zona horaria\n    var expiryToken = expiryDateToken.setHours(expiryDateToken.getHours() + 3);\n    var expiryRefresh = expiryDateTokenRefres.setHours(expiryDateToken.getHours() + 3);\n    // Verifica si el token ha expirado\n    if (new Date(expiryToken) > new Date()) {\n      return true;\n    } else {\n      if (new Date(expiryRefresh) < new Date()) {\n        return false;\n      }\n      console.log(\"TokenRedresh\");\n      this.userServices.RefreshToken(token).subscribe(response => {\n        // Manejar la respuesta del servidor\n        console.log(response);\n      });\n      return true;\n    }\n  }\n  getUserRole() {\n    const token = this.tokenService.getToken();\n    const decoded = this.jwtHelper.decodeToken(token.tokenAcces.token);\n    const userRole = decoded[ROLE_CLAIM_KEY];\n    console.log(userRole);\n    return userRole ? userRole : [];\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.UserServices), i0.ɵɵinject(i3.JwtHelperService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAASA,cAAc,QAAQ,aAAa;;;;;AAQ5C,OAAM,MAAOC,WAAW;EACpBC,YAAoBC,YAA0B,EAAUC,YAA0B,EAAUC,SAA2B;IAAnG,iBAAY,GAAZF,YAAY;IAAwB,iBAAY,GAAZC,YAAY;IAAwB,cAAS,GAATC,SAAS;EAAsB;EAE3HC,UAAU;IACN,MAAMC,KAAK,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IAC1C,IAAID,KAAK,EAAE;MACP,OAAO,IAAI,CAACE,aAAa,CAACF,KAAK,CAAC;;IAEpC,OAAO,KAAK;EAChB;EAEAE,aAAa,CAACF,KAAa;IACvB;IACA,MAAMG,eAAe,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACK,UAAU,CAACC,UAAU,CAAC;IAC7D,MAAMC,qBAAqB,GAAG,IAAIH,IAAI,CAACJ,KAAK,CAACQ,YAAY,CAACF,UAAU,CAAC;IACrE;IACA,IAAIG,WAAW,GAAGN,eAAe,CAACO,QAAQ,CAACP,eAAe,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC1E,IAAIC,aAAa,GAAGL,qBAAqB,CAACG,QAAQ,CAACP,eAAe,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC;IAGlF;IACA,IAAI,IAAIP,IAAI,CAACK,WAAW,CAAC,GAAG,IAAIL,IAAI,EAAE,EAAE;MACpC,OAAO,IAAI;KACd,MAAM;MACH,IAAI,IAAIA,IAAI,CAACQ,aAAa,CAAC,GAAG,IAAIR,IAAI,EAAE,EAAE;QACtC,OAAO,KAAK;;MAGhBS,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,IAAI,CAACjB,YAAY,CAACkB,YAAY,CAACf,KAAK,CAAC,CAACgB,SAAS,CAACC,QAAQ,IAAG;QACvD;QACAJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;MACzB,CAAC,CAAC;MACF,OAAO,IAAI;;EAEnB;EAEAC,WAAW;IACP,MAAMlB,KAAK,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IAC1C,MAAMkB,OAAO,GAAG,IAAI,CAACrB,SAAS,CAACsB,WAAW,CAACpB,KAAM,CAACK,UAAU,CAACL,KAAK,CAAC;IACnE,MAAMqB,QAAQ,GAAGF,OAAO,CAAC1B,cAAc,CAAC;IACxCoB,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;IACrB,OAAOA,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EACnC;;AA3CS3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFR;AAAM","names":["ROLE_CLAIM_KEY","AuthService","constructor","tokenService","userServices","jwtHelper","isLoggedIn","token","getToken","validateToken","expiryDateToken","Date","tokenAcces","timeExpiry","expiryDateTokenRefres","tokenRefresh","expiryToken","setHours","getHours","expiryRefresh","console","log","RefreshToken","subscribe","response","getUserRole","decoded","decodeToken","userRole","factory","providedIn"],"sourceRoot":"","sources":["d:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\services\\AuthServices.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n\r\nimport { Tokens } from '../Models/Token.models';\r\nimport { TokenService } from './TokenServices';\r\nimport { UserServices } from './userServices';\r\nimport { ROLE_CLAIM_KEY } from '../constant';\r\n\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    constructor(private tokenService: TokenService, private userServices: UserServices, private jwtHelper: JwtHelperService) { }\r\n\r\n    isLoggedIn(): boolean {\r\n        const token = this.tokenService.getToken();\r\n        if (token) {\r\n            return this.validateToken(token);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    validateToken(token: Tokens): boolean {\r\n        // Convertir la cadena de fecha a un objeto Date\r\n        const expiryDateToken = new Date(token.tokenAcces.timeExpiry);\r\n        const expiryDateTokenRefres = new Date(token.tokenRefresh.timeExpiry);\r\n        //agregar las horas de la zona horaria\r\n        var expiryToken = expiryDateToken.setHours(expiryDateToken.getHours() + 3)\r\n        var expiryRefresh = expiryDateTokenRefres.setHours(expiryDateToken.getHours() + 3)\r\n\r\n\r\n        // Verifica si el token ha expirado\r\n        if (new Date(expiryToken) > new Date()) {\r\n            return true;\r\n        } else {\r\n            if (new Date(expiryRefresh) < new Date()) {\r\n                return false\r\n            }\r\n\r\n            console.log(\"TokenRedresh\")\r\n            this.userServices.RefreshToken(token).subscribe(response => {\r\n                // Manejar la respuesta del servidor\r\n                console.log(response);\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getUserRole(): string[] {\r\n        const token = this.tokenService.getToken();\r\n        const decoded = this.jwtHelper.decodeToken(token!.tokenAcces.token);\r\n        const userRole = decoded[ROLE_CLAIM_KEY];\r\n        console.log(userRole)\r\n        return userRole ? userRole : [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}