{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MyValidators } from '../../Utils/Validatoes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/userServices\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" El Token de usuario es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" correo es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" La contrase\\u00F1a es requerida y debe ser Alfanumerica tener al menos 8 caracteres, 1 mayuscula 1 caracter especial. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" La contrase\\u00F1a no son iguales. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(userServices, fb, router, url) {\n    this.userServices = userServices;\n    this.fb = fb;\n    this.router = router;\n    this.url = url;\n    this.tokenUrl = null;\n    this.emailUrl = null;\n    //this.builderFormPassworReset();\n    this.url.paramMap.subscribe(params => {\n      this.tokenUrl = params.get('Token');\n      this.emailUrl = params.get('email');\n      this.builderFormPasswordReset(); // Llama a la función aquí, después de haber capturado los parámetros\n    });\n\n    console.log(this.tokenUrl);\n  }\n  builderFormPasswordReset() {\n    this.FormPassworReset = this.fb.group({\n      token: [this.tokenUrl, [Validators.required]],\n      email: [this.emailUrl, [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]]\n    }, {\n      validators: MyValidators.matchPasswords\n    });\n  }\n  onSutmit() {\n    if (this.FormPassworReset.valid) {\n      const {\n        confirmPassword,\n        ...userData\n      } = this.FormPassworReset.value;\n      this.userServices.Register(userData).subscribe(response => {\n        // Manejar la respuesta del backend\n        console.log('Respuesta del backend:', response);\n      }, error => {\n        // Manejar cualquier error en la solicitud HTTP\n        console.error('Error al enviar el formulario de registro al backend:', error);\n        console.log(error);\n      });\n    } else {\n      if (!this.FormPassworReset.get(\"password\")?.valid) {\n        alert(\"La contraseña debe tener al menos 8 caracteres, una mayúscula y un carácter especial.\");\n      } else if (!this.FormPassworReset.get(\"email\")?.valid) {\n        alert(\"El email debe ser válido.\");\n      } else {\n        alert(\"Por favor, rellene correctamente todos los campos.\");\n      }\n    }\n  }\n  get passwordField() {\n    return this.FormPassworReset.get('password');\n  }\n  get confirmPasswordField() {\n    return this.FormPassworReset.get('confirmPassword');\n  }\n  get emailField() {\n    return this.FormPassworReset.get('email');\n  }\n  get TokenField() {\n    return this.FormPassworReset.get('token');\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UserServices), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-Reset-password\"]],\n  decls: 23,\n  vars: 5,\n  consts: [[1, \"w-25\", \"m-auto\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"loginName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"loginName\", \"formControlName\", \"userName\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"registerEmail\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"registerEmail\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"registerPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"registerPassword\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"registerRepeatPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"registerRepeatPassword\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mb-4\"], [1, \"text-danger\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSutmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Token\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵtemplate(5, ResetPasswordComponent_div_5_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 6);\n      i0.ɵɵtemplate(10, ResetPasswordComponent_div_10_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 1)(12, \"label\", 7);\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 8);\n      i0.ɵɵtemplate(15, ResetPasswordComponent_div_15_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 1)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Repeat password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵtemplate(20, ResetPasswordComponent_div_20_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 11);\n      i0.ɵɵtext(22, \" Submit \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.FormPassworReset);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.TokenField.touched && ctx.TokenField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.emailField.touched && ctx.emailField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordField.touched && ctx.passwordField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.confirmPasswordField.touched && ctx.confirmPasswordField.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","MyValidators","i0","ResetPasswordComponent","constructor","userServices","fb","router","url","paramMap","subscribe","params","tokenUrl","get","emailUrl","builderFormPasswordReset","console","log","FormPassworReset","group","token","required","email","password","minLength","validPassword","confirmPassword","validators","matchPasswords","onSutmit","valid","userData","value","Register","response","error","alert","passwordField","confirmPasswordField","emailField","TokenField","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Components\\Reset-password copy\\Reset-password.component.ts","D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Components\\Reset-password copy\\Reset-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserServices } from '../../services/userServices';\r\n\r\nimport { Router, Route, ActivatedRoute } from '@angular/router';\r\nimport { MyValidators } from '../../Utils/Validatoes';\r\n\r\n\r\n@Component({\r\n    selector: 'app-Reset-password',\r\n    templateUrl: './Reset-password.component.html',\r\n    styleUrls: ['./Reset-password.component.css']\r\n})\r\n\r\nexport class ResetPasswordComponent {\r\n\r\n    FormPassworReset!: FormGroup;\r\n    tokenUrl: string | null = null;\r\n    emailUrl: string | null = null;\r\n\r\n    constructor(private userServices: UserServices, private fb: FormBuilder, private router: Router, private url: ActivatedRoute) {\r\n        //this.builderFormPassworReset();\r\n        this.url.paramMap.subscribe(params => {\r\n            this.tokenUrl = params.get('Token');\r\n            this.emailUrl = params.get('email');\r\n            this.builderFormPasswordReset(); // Llama a la función aquí, después de haber capturado los parámetros\r\n        });\r\n        console.log(this.tokenUrl)\r\n    }\r\n\r\n\r\n    private builderFormPasswordReset() {\r\n        this.FormPassworReset = this.fb.group({\r\n            token: [this.tokenUrl, [Validators.required]],\r\n            email: [this.emailUrl, [Validators.required]],\r\n            password: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\r\n            confirmPassword: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\r\n        }, {\r\n            validators: MyValidators.matchPasswords\r\n        });\r\n    }\r\n\r\n    onSutmit() {\r\n        if (this.FormPassworReset.valid) {\r\n\r\n            const { confirmPassword, ...userData } = this.FormPassworReset.value;\r\n\r\n            this.userServices.Register(userData!).subscribe(\r\n                response => {\r\n                    // Manejar la respuesta del backend\r\n                    console.log('Respuesta del backend:', response);\r\n                },\r\n                error => {\r\n                    // Manejar cualquier error en la solicitud HTTP\r\n                    console.error('Error al enviar el formulario de registro al backend:', error);\r\n                    console.log(error);\r\n\r\n                })\r\n        } else {\r\n            if (!this.FormPassworReset.get(\"password\")?.valid) {\r\n                alert(\"La contraseña debe tener al menos 8 caracteres, una mayúscula y un carácter especial.\");\r\n            } else if (!this.FormPassworReset.get(\"email\")?.valid) {\r\n                alert(\"El email debe ser válido.\");\r\n            } else {\r\n                alert(\"Por favor, rellene correctamente todos los campos.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    get passwordField() {\r\n        return this.FormPassworReset.get('password')!;\r\n    }\r\n\r\n    get confirmPasswordField() {\r\n        return this.FormPassworReset.get('confirmPassword')!;\r\n    }\r\n\r\n    get emailField() {\r\n        return this.FormPassworReset.get('email')!;\r\n    }\r\n\r\n    get TokenField() {\r\n        return this.FormPassworReset.get('token')!;\r\n    }\r\n\r\n}\r\n","<form class=\"w-25 m-auto\" [formGroup]=\"FormPassworReset\" (ngSubmit)=\"onSutmit()\">\r\n\r\n    <!-- token input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"loginName\">Token</label>\r\n        <input type=\"text\" id=\"loginName\" formControlName=\"userName\" class=\"form-control\" required />\r\n        <div class=\"text-danger\" *ngIf=\"TokenField.touched && TokenField.invalid\">\r\n            El Token de usuario es requerido.\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!-- Email input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerEmail\">Email</label>\r\n        <input type=\"email\" id=\"registerEmail\" formControlName=\"email\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"emailField.touched && emailField.invalid\">\r\n            correo es requerido\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Password input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerPassword\">Password</label>\r\n        <input type=\"password\" id=\"registerPassword\" formControlName=\"password\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"passwordField.touched && passwordField.invalid\">\r\n            La contraseña es requerida y debe ser Alfanumerica tener al menos 8 caracteres, 1 mayuscula 1\r\n            caracter especial.\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Repeat Password input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerRepeatPassword\">Repeat password</label>\r\n        <input type=\"password\" id=\"registerRepeatPassword\" formControlName=\"confirmPassword\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"confirmPasswordField.touched && confirmPasswordField.invalid\">\r\n            La contraseña no son iguales.\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Submit button -->\r\n    <!-- <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\" [disabled]=\"!formLogin.valid\">Sign -->\r\n    <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\"> Submit </button>\r\n\r\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}