{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MyValidators } from '../../Utils/Validatoes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/userServices\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" El nombre de usuario es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" correo es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" La contrase\\u00F1a es requerida y debe ser Alfanumerica tener al menos 8 caracteres, 1 mayuscula 1 caracter especial. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" La contrase\\u00F1a no son iguales. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(userServices, fb, router) {\n    this.userServices = userServices;\n    this.fb = fb;\n    this.router = router;\n    this.builderFormPassworReset();\n  }\n  builderFormPassworReset() {\n    this.FormPassworReset = this.fb.group({\n      token: ['', [Validators.required]],\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]]\n    }, {\n      validators: MyValidators.matchPasswords\n    });\n  }\n  get passwordField() {\n    return this.FormPassworReset.get('password');\n  }\n  get confirmPasswordField() {\n    return this.FormPassworReset.get('confirmPassword');\n  }\n  get emailField() {\n    return this.FormPassworReset.get('email');\n  }\n  get TokenField() {\n    return this.FormPassworReset.get('token');\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.UserServices), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-Reset-password\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[1, \"w-25\", \"m-auto\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"loginName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"loginName\", \"formControlName\", \"userName\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"registerEmail\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"registerEmail\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"registerPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"registerPassword\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"registerRepeatPassword\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"registerRepeatPassword\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mb-4\"], [1, \"text-danger\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵtemplate(5, ResetPasswordComponent_div_5_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 6);\n      i0.ɵɵtemplate(10, ResetPasswordComponent_div_10_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 1)(12, \"label\", 7);\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 8);\n      i0.ɵɵtemplate(15, ResetPasswordComponent_div_15_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 1)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Repeat password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵtemplate(20, ResetPasswordComponent_div_20_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 11);\n      i0.ɵɵtext(22, \" Submit \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.TokenField.touched && ctx.TokenField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.emailField.touched && ctx.emailField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordField.touched && ctx.passwordField.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.confirmPasswordField.touched && ctx.confirmPasswordField.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgForm, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAInE,SAASC,YAAY,QAAQ,wBAAwB;;;;;;;;ICC7CC,+BAA0E;IACtEA,oDACJ;IAAAA,iBAAM;;;;;IAQNA,+BAA0E;IACtEA,qCACJ;IAAAA,iBAAM;;;;;IAONA,+BAAgF;IAC5EA,uIAEJ;IAAAA,iBAAM;;;;;IAONA,+BAA8F;IAC1FA,oDACJ;IAAAA,iBAAM;;;ADvBd,OAAM,MAAOC,sBAAsB;EAI/BC,YAAoBC,YAA0B,EAAUC,EAAe,EAAUC,MAAc;IAA3E,iBAAY,GAAZF,YAAY;IAAwB,OAAE,GAAFC,EAAE;IAAuB,WAAM,GAANC,MAAM;IAEnF,IAAI,CAACC,uBAAuB,EAAE;EAClC;EAGQA,uBAAuB;IAC3B,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MAClCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACY,QAAQ,CAAC,CAAC;MAClCE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,EAAEd,YAAY,CAACe,aAAa,CAAC,CAAC;MAC1FC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,EAAEd,YAAY,CAACe,aAAa,CAAC;KACnG,EAAE;MACCE,UAAU,EAAEjB,YAAY,CAACkB;KAC5B,CAAC;EACN;EAEA,IAAIC,aAAa;IACb,OAAO,IAAI,CAACX,gBAAgB,CAACY,GAAG,CAAC,UAAU,CAAE;EACjD;EAEA,IAAIC,oBAAoB;IACpB,OAAO,IAAI,CAACb,gBAAgB,CAACY,GAAG,CAAC,iBAAiB,CAAE;EACxD;EAEA,IAAIE,UAAU;IACV,OAAO,IAAI,CAACd,gBAAgB,CAACY,GAAG,CAAC,OAAO,CAAE;EAC9C;EAEA,IAAIG,UAAU;IACV,OAAO,IAAI,CAACf,gBAAgB,CAACY,GAAG,CAAC,OAAO,CAAE;EAC9C;;AAnCSlB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdnC3B,+BAA0B;MAIwBA,wBAAQ;MAAAA,iBAAQ;MAC1DA,2BAA6F;MAC7FA,uEAEM;MAEVA,iBAAM;MAGNA,8BAA+B;MACmBA,qBAAK;MAAAA,iBAAQ;MAC3DA,2BAAsF;MACtFA,yEAEM;MACVA,iBAAM;MAGNA,+BAA+B;MACsBA,yBAAQ;MAAAA,iBAAQ;MACjEA,4BAA+F;MAC/FA,yEAGM;MACVA,iBAAM;MAGNA,+BAA+B;MAC4BA,gCAAe;MAAAA,iBAAQ;MAC9EA,6BAA4G;MAC5GA,yEAEM;MACVA,iBAAM;MAINA,mCAA6D;MAACA,yBAAO;MAAAA,iBAAS;;;MApChDA,eAA8C;MAA9CA,uEAA8C;MAU9CA,eAA8C;MAA9CA,uEAA8C;MAS9CA,eAAoD;MAApDA,6EAAoD;MAUpDA,eAAkE;MAAlEA,2FAAkE","names":["Validators","MyValidators","i0","ResetPasswordComponent","constructor","userServices","fb","router","builderFormPassworReset","FormPassworReset","group","token","required","email","password","minLength","validPassword","confirmPassword","validators","matchPasswords","passwordField","get","confirmPasswordField","emailField","TokenField","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Components\\Reset-password copy\\Reset-password.component.ts","D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Components\\Reset-password copy\\Reset-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserServices } from '../../services/userServices';\r\n\r\nimport { Router, Route } from '@angular/router';\r\nimport { MyValidators } from '../../Utils/Validatoes';\r\n\r\n\r\n@Component({\r\n    selector: 'app-Reset-password',\r\n    templateUrl: './Reset-password.component.html',\r\n    styleUrls: ['./Reset-password.component.css']\r\n})\r\n\r\nexport class ResetPasswordComponent {\r\n\r\n    FormPassworReset!: FormGroup;\r\n\r\n    constructor(private userServices: UserServices, private fb: FormBuilder, private router: Router) {\r\n\r\n        this.builderFormPassworReset();\r\n    }\r\n\r\n\r\n    private builderFormPassworReset() {\r\n        this.FormPassworReset = this.fb.group({\r\n            token: ['', [Validators.required]],\r\n            email: ['', [Validators.required]],\r\n            password: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\r\n            confirmPassword: ['', [Validators.required, Validators.minLength(8), MyValidators.validPassword]],\r\n        }, {\r\n            validators: MyValidators.matchPasswords\r\n        });\r\n    }\r\n\r\n    get passwordField() {\r\n        return this.FormPassworReset.get('password')!;\r\n    }\r\n\r\n    get confirmPasswordField() {\r\n        return this.FormPassworReset.get('confirmPassword')!;\r\n    }\r\n\r\n    get emailField() {\r\n        return this.FormPassworReset.get('email')!;\r\n    }\r\n\r\n    get TokenField() {\r\n        return this.FormPassworReset.get('token')!;\r\n    }\r\n\r\n}\r\n","<form class=\"w-25 m-auto\">\r\n\r\n    <!-- token input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"loginName\">Username</label>\r\n        <input type=\"text\" id=\"loginName\" formControlName=\"userName\" class=\"form-control\" required />\r\n        <div class=\"text-danger\" *ngIf=\"TokenField.touched && TokenField.invalid\">\r\n            El nombre de usuario es requerido.\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!-- Email input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerEmail\">Email</label>\r\n        <input type=\"email\" id=\"registerEmail\" formControlName=\"email\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"emailField.touched && emailField.invalid\">\r\n            correo es requerido\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Password input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerPassword\">Password</label>\r\n        <input type=\"password\" id=\"registerPassword\" formControlName=\"password\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"passwordField.touched && passwordField.invalid\">\r\n            La contraseña es requerida y debe ser Alfanumerica tener al menos 8 caracteres, 1 mayuscula 1\r\n            caracter especial.\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Repeat Password input -->\r\n    <div class=\"form-outline mb-4\">\r\n        <label class=\"form-label\" for=\"registerRepeatPassword\">Repeat password</label>\r\n        <input type=\"password\" id=\"registerRepeatPassword\" formControlName=\"confirmPassword\" class=\"form-control\" />\r\n        <div class=\"text-danger\" *ngIf=\"confirmPasswordField.touched && confirmPasswordField.invalid\">\r\n            La contraseña no son iguales.\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Submit button -->\r\n    <!-- <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\" [disabled]=\"!formLogin.valid\">Sign -->\r\n    <button type=\"submit\" class=\"btn btn-primary btn-block mb-4\"> Submit </button>\r\n\r\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}