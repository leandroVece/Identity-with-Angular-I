{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nimport * as i2 from \"./TokenServices\";\nimport * as i3 from \"./userServices\";\nexport class AuthService {\n  constructor(jwtHelper, tokenService, userServices) {\n    this.jwtHelper = jwtHelper;\n    this.tokenService = tokenService;\n    this.userServices = userServices;\n  }\n  isLoggedIn() {\n    const token = this.tokenService.getToken();\n    if (token) {\n      return this.validateToken(token);\n    }\n    return false;\n  }\n  validateToken(token) {\n    // Convertir la cadena de fecha a un objeto Date\n    const expiryDateToken = new Date(token.tokenAcces.timeExpiry);\n    const expiryDateTokenRefres = new Date(token.tokenRefresh.timeExpiry);\n    //agregar las horas de la zona horaria\n    var expiryToken = expiryDateToken.setHours(expiryDateToken.getHours() + 3);\n    var expiryRefresh = expiryDateTokenRefres.setHours(expiryDateToken.getHours() + 3);\n    console.log(\"ValidateToken\");\n    // Verifica si el token ha expirado\n    if (new Date(expiryToken) <= new Date()) {\n      return true;\n    } else {\n      if (new Date(expiryRefresh) >= new Date()) {\n        console.log(\"TokenRedresh\");\n        this.userServices.RefreshToken(token);\n        return true;\n      }\n      return false;\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.TokenService), i0.ɵɵinject(i3.UserServices));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAYA,OAAM,MAAOA,WAAW;EACpBC,YAAoBC,SAA2B,EAAUC,YAA0B,EAAUC,YAA0B;IAAnG,cAAS,GAATF,SAAS;IAA4B,iBAAY,GAAZC,YAAY;IAAwB,iBAAY,GAAZC,YAAY;EAAkB;EAE3HC,UAAU;IACN,MAAMC,KAAK,GAAG,IAAI,CAACH,YAAY,CAACI,QAAQ,EAAE;IAC1C,IAAID,KAAK,EAAE;MACP,OAAO,IAAI,CAACE,aAAa,CAACF,KAAK,CAAC;;IAEpC,OAAO,KAAK;EAChB;EAEAE,aAAa,CAACF,KAAa;IACvB;IACA,MAAMG,eAAe,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACK,UAAU,CAACC,UAAU,CAAC;IAC7D,MAAMC,qBAAqB,GAAG,IAAIH,IAAI,CAACJ,KAAK,CAACQ,YAAY,CAACF,UAAU,CAAC;IACrE;IACA,IAAIG,WAAW,GAAGN,eAAe,CAACO,QAAQ,CAACP,eAAe,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC1E,IAAIC,aAAa,GAAGL,qBAAqB,CAACG,QAAQ,CAACP,eAAe,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC;IAElFE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B;IACA,IAAI,IAAIV,IAAI,CAACK,WAAW,CAAC,IAAI,IAAIL,IAAI,EAAE,EAAE;MACrC,OAAO,IAAI;KACd,MAAM;MACH,IAAI,IAAIA,IAAI,CAACQ,aAAa,CAAC,IAAI,IAAIR,IAAI,EAAE,EAAE;QACvCS,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3B,IAAI,CAAChB,YAAY,CAACiB,YAAY,CAACf,KAAK,CAAC;QACrC,OAAO,IAAI;;MAEf,OAAO,KAAK;;EAEpB;;AA/BSN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFR;AAAM","names":["AuthService","constructor","jwtHelper","tokenService","userServices","isLoggedIn","token","getToken","validateToken","expiryDateToken","Date","tokenAcces","timeExpiry","expiryDateTokenRefres","tokenRefresh","expiryToken","setHours","getHours","expiryRefresh","console","log","RefreshToken","factory","providedIn"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\services\\AuthServices.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n\r\nimport { Tokens } from '../Models/Token.models';\r\nimport { TokenService } from './TokenServices';\r\nimport { UserServices } from './userServices';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    constructor(private jwtHelper: JwtHelperService, private tokenService: TokenService, private userServices: UserServices) { }\r\n\r\n    isLoggedIn(): boolean {\r\n        const token = this.tokenService.getToken();\r\n        if (token) {\r\n            return this.validateToken(token);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    validateToken(token: Tokens): boolean {\r\n        // Convertir la cadena de fecha a un objeto Date\r\n        const expiryDateToken = new Date(token.tokenAcces.timeExpiry);\r\n        const expiryDateTokenRefres = new Date(token.tokenRefresh.timeExpiry);\r\n        //agregar las horas de la zona horaria\r\n        var expiryToken = expiryDateToken.setHours(expiryDateToken.getHours() + 3)\r\n        var expiryRefresh = expiryDateTokenRefres.setHours(expiryDateToken.getHours() + 3)\r\n\r\n        console.log(\"ValidateToken\")\r\n        // Verifica si el token ha expirado\r\n        if (new Date(expiryToken) <= new Date()) {\r\n            return true;\r\n        } else {\r\n            if (new Date(expiryRefresh) >= new Date()) {\r\n                console.log(\"TokenRedresh\")\r\n                this.userServices.RefreshToken(token);\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}