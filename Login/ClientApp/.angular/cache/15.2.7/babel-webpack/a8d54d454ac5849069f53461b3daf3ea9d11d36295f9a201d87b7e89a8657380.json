{"ast":null,"code":"export class MyValidators {\n  static validPassword(control) {\n    const value = control.value;\n    if (!containsNumber(value)) {\n      return {\n        invalid_password: true\n      };\n    }\n    return null;\n  }\n  static matchPasswords(control) {\n    const password = control.get('password').value;\n    const confirmPassword = control.get('confirmPassword').value;\n    if (password !== confirmPassword) {\n      return {\n        match_password: true\n      };\n    }\n    return null;\n  }\n}\nfunction containsNumber(value) {\n  return value.split('').find(v => isNumber(v)) !== undefined;\n}\nfunction isNumber(value) {\n  return !isNaN(parseInt(value, 10));\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,YAAY;EAGrB,OAAOC,aAAa,CAACC,OAAwB;IACzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,EAAE;MACxB,OAAO;QAAEE,gBAAgB,EAAE;MAAI,CAAE;;IAErC,OAAO,IAAI;EACf;EAEA,OAAOC,cAAc,CAACJ,OAAwB;IAC1C,MAAMK,QAAQ,GAAGL,OAAO,CAACM,GAAG,CAAC,UAAU,CAAE,CAACL,KAAK;IAC/C,MAAMM,eAAe,GAAGP,OAAO,CAACM,GAAG,CAAC,iBAAiB,CAAE,CAACL,KAAK;IAC7D,IAAII,QAAQ,KAAKE,eAAe,EAAE;MAC9B,OAAO;QAAEC,cAAc,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI;EACf;;AAIJ,SAASN,cAAc,CAACD,KAAa;EACjC,OAAOA,KAAK,CAACQ,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAAC,CAAC,KAAKE,SAAS;AAC/D;AAGA,SAASD,QAAQ,CAACX,KAAa;EAC3B,OAAO,CAACa,KAAK,CAACC,QAAQ,CAACd,KAAK,EAAE,EAAE,CAAC,CAAC;AACtC","names":["MyValidators","validPassword","control","value","containsNumber","invalid_password","matchPasswords","password","get","confirmPassword","match_password","split","find","v","isNumber","undefined","isNaN","parseInt"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Utils\\Validatoes.ts"],"sourcesContent":["import { AbstractControl } from '@angular/forms';\r\n\r\nexport class MyValidators {\r\n\r\n\r\n    static validPassword(control: AbstractControl) {\r\n        const value = control.value;\r\n        if (!containsNumber(value)) {\r\n            return { invalid_password: true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static matchPasswords(control: AbstractControl) {\r\n        const password = control.get('password')!.value;\r\n        const confirmPassword = control.get('confirmPassword')!.value;\r\n        if (password !== confirmPassword) {\r\n            return { match_password: true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nfunction containsNumber(value: string) {\r\n    return value.split('').find(v => isNumber(v)) !== undefined;\r\n}\r\n\r\n\r\nfunction isNumber(value: string) {\r\n    return !isNaN(parseInt(value, 10));\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}