{"ast":null,"code":"import { tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/TokenServices\";\nexport class TokenInterceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    // Verifica si la solicitud necesita un token de autorización\n    if (request.headers.has('Authorization')) {\n      const token = this.tokenService.getToken();\n      if (token) {\n        // Clona la solicitud original y agrega el token de autorización\n        const authReq = request.clone({\n          headers: request.headers.set('Authorization', `Bearer ${token}`)\n        });\n        // Envía la solicitud con el token adjunto\n        return next.handle(authReq);\n      }\n    }\n    // Si no se necesita un token de autorización, sigue adelante con la solicitud original\n    return next.handle(request);\n  }\n  refreshAccessToken() {\n    return this.http.get(`${environment.Api_url}/Authentication/refresh-token`).pipe(tap(response => {\n      // Guardar el nuevo token en el servicio de tokens\n      this.tokenService.saveToken(response.access_token);\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.TokenService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;AAEtC,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAkB;EAElDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,IAAID,OAAO,CAACE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,EAAE;MACxC,MAAMC,KAAK,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE;MAC1C,IAAID,KAAK,EAAE;QACT;QACA,MAAME,OAAO,GAAGN,OAAO,CAACO,KAAK,CAAC;UAC5BL,OAAO,EAAEF,OAAO,CAACE,OAAO,CAACM,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE;SAChE,CAAC;QACF;QACA,OAAOH,IAAI,CAACQ,MAAM,CAACH,OAAO,CAAC;;;IAG/B;IACA,OAAOL,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;EAC7B;EAEAU,kBAAkB;IAChB,OAAO,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGjB,WAAW,CAACkB,OAAO,+BAA+B,CAAC,CAACC,IAAI,CAC9EpB,GAAG,CAAEqB,QAAa,IAAI;MACpB;MACA,IAAI,CAACjB,YAAY,CAACkB,SAAS,CAACD,QAAQ,CAACE,YAAY,CAAC;IACpD,CAAC,CAAC,CACH;EACH;;AA7BWrB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAsB,SAAhBtB,gBAAgB;AAAA","names":["tap","environment","TokenInterceptor","constructor","tokenService","intercept","request","next","headers","has","token","getToken","authReq","clone","set","handle","refreshAccessToken","http","get","Api_url","pipe","response","saveToken","access_token","factory"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Interceptor\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { TokenService } from '../services/TokenServices';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  http: any;\r\n\r\n  constructor(private tokenService: TokenService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Verifica si la solicitud necesita un token de autorización\r\n    if (request.headers.has('Authorization')) {\r\n      const token = this.tokenService.getToken();\r\n      if (token) {\r\n        // Clona la solicitud original y agrega el token de autorización\r\n        const authReq = request.clone({\r\n          headers: request.headers.set('Authorization', `Bearer ${token}`)\r\n        });\r\n        // Envía la solicitud con el token adjunto\r\n        return next.handle(authReq);\r\n      }\r\n    }\r\n    // Si no se necesita un token de autorización, sigue adelante con la solicitud original\r\n    return next.handle(request);\r\n  }\r\n\r\n  refreshAccessToken(): Observable<any> {\r\n    return this.http.get(`${environment.Api_url}/Authentication/refresh-token`).pipe(\r\n      tap((response: any) => {\r\n        // Guardar el nuevo token en el servicio de tokens\r\n        this.tokenService.saveToken(response.access_token);\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}