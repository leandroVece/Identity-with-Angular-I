{"ast":null,"code":"export class MyValidators {\n  static validPassword(control) {\n    const value = control.value;\n    if (!containsNumber(value)) {\n      return {\n        invalid_password: true\n      };\n    }\n    if (!containsSpecialCharacter(value)) {\n      return {\n        invalid_password: true\n      };\n    }\n    if (!containsUppercase(value)) {\n      return {\n        invalid_password: true\n      };\n    }\n    return null;\n  }\n  static matchPasswords(control) {\n    const password = control.get('password').value;\n    const confirmPassword = control.get('confirmPassword').value;\n    if (password !== confirmPassword) {\n      return {\n        match_password: true\n      };\n    }\n    return null;\n  }\n}\nfunction containsNumber(value) {\n  return /\\d/.test(value); // Comprueba si hay al menos un dígito\n}\n\nfunction containsSpecialCharacter(value) {\n  return /[!@#$%^&*(),.?\":{}|<>]/.test(value); // Comprueba si hay al menos un carácter especial\n}\n\nfunction containsUppercase(value) {\n  return /[A-Z]/.test(value); // Comprueba si hay al menos una letra mayúscula\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,YAAY;EAGrB,OAAOC,aAAa,CAACC,OAAwB;IACzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,EAAE;MACxB,OAAO;QAAEE,gBAAgB,EAAE;MAAI,CAAE;;IAErC,IAAI,CAACC,wBAAwB,CAACH,KAAK,CAAC,EAAE;MAClC,OAAO;QAAEE,gBAAgB,EAAE;MAAI,CAAE;;IAErC,IAAI,CAACE,iBAAiB,CAACJ,KAAK,CAAC,EAAE;MAC3B,OAAO;QAAEE,gBAAgB,EAAE;MAAI,CAAE;;IAGrC,OAAO,IAAI;EACf;EAEA,OAAOG,cAAc,CAACN,OAAwB;IAC1C,MAAMO,QAAQ,GAAGP,OAAO,CAACQ,GAAG,CAAC,UAAU,CAAE,CAACP,KAAK;IAC/C,MAAMQ,eAAe,GAAGT,OAAO,CAACQ,GAAG,CAAC,iBAAiB,CAAE,CAACP,KAAK;IAC7D,IAAIM,QAAQ,KAAKE,eAAe,EAAE;MAC9B,OAAO;QAAEC,cAAc,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI;EACf;;AAIJ,SAASR,cAAc,CAACD,KAAa;EACjC,OAAO,IAAI,CAACU,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC;AAC7B;;AAEA,SAASG,wBAAwB,CAACH,KAAa;EAC3C,OAAO,wBAAwB,CAACU,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC;AACjD;;AAEA,SAASI,iBAAiB,CAACJ,KAAa;EACpC,OAAO,OAAO,CAACU,IAAI,CAACV,KAAK,CAAC,CAAC,CAAC;AAChC","names":["MyValidators","validPassword","control","value","containsNumber","invalid_password","containsSpecialCharacter","containsUppercase","matchPasswords","password","get","confirmPassword","match_password","test"],"sourceRoot":"","sources":["D:\\proyecto web c shrap\\Angular.net\\UserLogin\\Login\\ClientApp\\src\\app\\Utils\\Validatoes.ts"],"sourcesContent":["import { AbstractControl } from '@angular/forms';\r\n\r\nexport class MyValidators {\r\n\r\n\r\n    static validPassword(control: AbstractControl) {\r\n        const value = control.value;\r\n        if (!containsNumber(value)) {\r\n            return { invalid_password: true };\r\n        }\r\n        if (!containsSpecialCharacter(value)) {\r\n            return { invalid_password: true };\r\n        }\r\n        if (!containsUppercase(value)) {\r\n            return { invalid_password: true };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static matchPasswords(control: AbstractControl) {\r\n        const password = control.get('password')!.value;\r\n        const confirmPassword = control.get('confirmPassword')!.value;\r\n        if (password !== confirmPassword) {\r\n            return { match_password: true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nfunction containsNumber(value: string) {\r\n    return /\\d/.test(value); // Comprueba si hay al menos un dígito\r\n}\r\n\r\nfunction containsSpecialCharacter(value: string) {\r\n    return /[!@#$%^&*(),.?\":{}|<>]/.test(value); // Comprueba si hay al menos un carácter especial\r\n}\r\n\r\nfunction containsUppercase(value: string) {\r\n    return /[A-Z]/.test(value); // Comprueba si hay al menos una letra mayúscula\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}